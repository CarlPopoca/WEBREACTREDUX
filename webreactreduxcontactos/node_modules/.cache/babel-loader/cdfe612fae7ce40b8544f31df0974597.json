{"ast":null,"code":"var _jsxFileName = \"C:\\\\PROYECTOS\\\\VisualStudioNET\\\\WEBREACTREDUXCONTACTOS\\\\webreactreduxcontactos\\\\src\\\\componentes\\\\Contactos.js\";\nimport React, { Component } from 'react';\nimport { Label, FormGroup, Input, Modal, ModalHeader, ModalBody, ModalFooter, Table, Button } from 'reactstrap';\nimport { Redirect } from 'react-router-dom';\nimport { confirmAlert } from 'react-confirm-alert';\nimport 'react-confirm-alert/src/react-confirm-alert.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { connect } from 'react-redux';\nimport ContactosList from './ContactosList';\nimport { fetchContactos, saveContactos, updateContactos, deleteContactos } from '../actions/actionsContactos';\nimport AlertaError from './AlertaError';\n/*import Navegacion from './Navegacion';*/\n//Una Clase que extiende del component de React se comvierte en una etiqueta html\n\nclass Contactos extends Component {\n  componentDidMount() {\n    this.refrescarContactos();\n  }\n\n  constructor(props) {\n    super(props);\n    const token = localStorage.getItem(\"token\");\n    let loggedIn = true;\n\n    if (token == null) {\n      loggedIn = false;\n    }\n\n    this.state = {\n      isNullNombre: '',\n      isNullCelular: '',\n      isNullSexo: '',\n      alert_message: '',\n      contactos: [],\n      datosNuevoContacto: {\n        Nombre: '',\n        Celular: '',\n        Sexo: ''\n      },\n      datosEditarContacto: {\n        Id: '',\n        Nombre: '',\n        Celular: '',\n        Sexo: ''\n      },\n      nuevoContactoModal: false,\n      editarContactoModal: false,\n      loggedIn\n    };\n  } //Se declara en el objeto state las variables que mantendran el valor\n  //Contactos - Los datos que llenaran el Table\n  //datosNuevoContacto - Los datos para la Alta\n  //datosEditarContacto - Los datos para la modificación\n  //nuevoContactoModal - Para la visualización y cierre de la ventana modal de Alta\n  //editarContactoModal - Para la visualización  y cierre de la ventana modal de modificación\n  //Método que refrescara el Table\n\n\n  refrescarContactos() {\n    this.props.fetchContactos();\n  }\n\n  componentWillReceiveProps(nextProps) {} //entra cada vez que se ejecuta un evento transaccional\n  //Método que niega el valor de la variable nuevoContactoModal inicializada en false, esto\n  //permite mostrar el Modal para la Alta y inicializa los datos del objeto datosNuevoContacto, y\n  //Se regresa el valor de la variable nuevoContactoModal a false cuando se pulsa el botón de cerrar y\n  //cuando se pulsa el botón de cancelar\n\n\n  toggleNuevoContactoModal() {\n    this.setState({\n      isNullNombre: '',\n      isNullCelular: '',\n      isNullSexo: '',\n      nuevoContactoModal: !this.state.nuevoContactoModal,\n      datosNuevoContacto: {\n        Nombre: '',\n        Celular: '',\n        Sexo: ''\n      }\n    });\n  } //Método que niega el valor de la variable editarContactoModal inicializada en false, esto\n  //permite mostrar el Modal para la Modificación y\n  //se regresa el valor de la variable editarContactoModal a false cuando se pulsa el botón de cerrar y\n  //cuando se pulsa el botón de cancelar\n\n\n  toggleEditarContactoModal() {\n    //Este metodo se dispara cuando se cierra la ventana modal de editar, y cuando se pulsa el botón de Cancelar\n    // convierte el valor de la variable editarContactoModal a false\n    this.setState({\n      editarContactoModal: !this.state.editarContactoModal\n    });\n  }\n\n  validacionInput(e) {\n    if (e == 'true') {\n      return {\n        borderColor: '#dc3545'\n      };\n    }\n\n    if (e == 'false') {\n      return {\n        borderColor: '#28a745'\n      };\n    }\n\n    return {\n      borderColor: 'none'\n    };\n  }\n\n  validarContacto(contacto) {\n    var nombre = 'false',\n        celular = 'false',\n        sexo = 'false',\n        alert = '',\n        valAlert = false,\n        valContacto = true;\n\n    if (contacto.Nombre == '') {\n      nombre = 'true';\n      valAlert = true;\n    }\n\n    if (contacto.Celular == '') {\n      celular = 'true';\n      valAlert = true;\n    }\n\n    if (contacto.Sexo == '') {\n      sexo = 'true';\n      valAlert = true;\n    }\n\n    if (valAlert) {\n      alert = 'Introduzca la información que se le solicita';\n      valContacto = false;\n    }\n\n    this.setState({\n      isNullNombre: nombre,\n      isNullCelular: celular,\n      isNullSexo: sexo,\n      alert_message: alert\n    });\n    return valContacto;\n  } //Método que permite guardar los datos capturados en el modal de Alta\n\n\n  agregarContacto() {\n    let _this$state$datosNuev = this.state.datosNuevoContacto,\n        Nombre = _this$state$datosNuev.Nombre,\n        Celular = _this$state$datosNuev.Celular,\n        Sexo = _this$state$datosNuev.Sexo;\n    alert('entro');\n\n    if (this.validarContacto(this.state.datosNuevoContacto)) {\n      this.props.saveContactos({\n        Nombre,\n        Celular,\n        Sexo\n      }).then(response => {\n        //Se setea la variable de state contactos, los simbolo {} permiten usarla para setearla por medio de let\n        //this.state contiene los contactos que se renderizaron en el Table\n        let contactos = this.state.contactos; //Se agrega al final el contacto que devolvio el metodo post de la api contactos\n\n        contactos.push(response.data); //Inicializa el estado de las variables nuevoContactoModal y el objeto datosNuevoContacto\n\n        this.setState({\n          contactos,\n          nuevoContactoModal: false,\n          datosNuevoContacto: {\n            Nombre: '',\n            Celular: '',\n            Sexo: ''\n          },\n          alert_message: '',\n          isNullNombre: '',\n          isNullCelular: '',\n          isNullSexo: ''\n        });\n      }, err => err.response.json().then(() => {\n        //Entra cuando los errores son superficiales, por ejemplo cuando los datos que se capturan no \n        //coinciden con el tipo de dato \n        this.setState({\n          alert_message: 'No se pudo agregar el contacto'\n        });\n      })).catch(error => {\n        //entra cuando los errores se propagan desde la base de datos, por ejemplo cuando la logitud de un \n        //  es superior al campo de la base de datos\n        this.setState({\n          alert_message: 'No se pudo agregar el contacto'\n        });\n      });\n    }\n  } //Método que permite guardar los datos capturados en el modal de Modificación\n\n\n  actualizarContacto() {\n    let _this$state$datosEdit = this.state.datosEditarContacto,\n        Id = _this$state$datosEdit.Id,\n        Nombre = _this$state$datosEdit.Nombre,\n        Celular = _this$state$datosEdit.Celular,\n        Sexo = _this$state$datosEdit.Sexo;\n\n    if (this.validarContacto(this.state.datosEditarContacto)) {\n      this.props.updateContactos({\n        Id,\n        Nombre,\n        Celular,\n        Sexo\n      }).then(() => {\n        //Se refresca el Table\n        this.refrescarContactos(); //Inicializa el estado de las variables nuevoContactoModal y el objeto datosNuevoContacto\n\n        this.setState({\n          editarContactoModal: false,\n          datosEditarContacto: {\n            Id: '',\n            Nombre: '',\n            Celular: '',\n            Sexo: ''\n          },\n          alert_message: '',\n          isNullNombre: '',\n          isNullCelular: '',\n          isNullSexo: ''\n        });\n      }, err => err.response.json().then(() => {\n        this.setState({\n          alert_message: 'No se pudo actualizar el contacto'\n        });\n      })).catch(error => {\n        //entra cuando los errores se propagan desde la base de datos, por ejemplo cuando la logitud de un \n        //  es superior al campo de la base de datos\n        this.setState({\n          alert_message: 'No se pudo actualizar el contacto'\n        });\n      });\n    }\n  } //Método para eliminar un Contacto\n\n\n  eliminarContacto(id) {\n    confirmAlert({\n      customUI: ({\n        onClose\n      }) => {\n        return React.createElement(\"div\", {\n          className: \"custom-ui\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 229\n          },\n          __self: this\n        }, React.createElement(\"h1\", {\n          className: \"glyphicon glyphicon-warning-sign\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 231\n          },\n          __self: this\n        }, React.createElement(FontAwesomeIcon, {\n          className: \"mr-3\",\n          icon: \"exclamation-triangle\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 232\n          },\n          __self: this\n        }), \"Esta seguro de eliminar el registro?\"), React.createElement(\"div\", {\n          className: \"btn-toolbar row\",\n          role: \"toolbar\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 234\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"col-sm-4\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 235\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"btn-group col-sm-4\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 236\n          },\n          __self: this\n        }, React.createElement(Button, {\n          color: \"secondary\",\n          size: \"sm\",\n          className: \"mr-3\",\n          onClick: onClose,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 237\n          },\n          __self: this\n        }, React.createElement(FontAwesomeIcon, {\n          className: \"mr-1\",\n          icon: \"times\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 238\n          },\n          __self: this\n        }), \"No\"), React.createElement(Button, {\n          color: \"primary\",\n          size: \"sm\",\n          className: \"btn btn-default \",\n          onClick: () => {\n            this.props.deleteContactos(id).then(() => {\n              //Se refresca el Table\n              this.refrescarContactos();\n              onClose();\n            }, error => error.response.json().then(() => {\n              this.setState({\n                alert_message: 'No se pudo eliminar el contacto'\n              });\n            })).catch(error => {\n              //entra cuando los errores se propagan desde la base de datos, por ejemplo cuando la logitud de un \n              //  es superior al campo de la base de datos\n              this.setState({\n                alert_message: 'No se pudo eliminar el contacto'\n              });\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 241\n          },\n          __self: this\n        }, React.createElement(FontAwesomeIcon, {\n          className: \"mr-1\",\n          icon: \"check\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 265\n          },\n          __self: this\n        }), \"Si\")), React.createElement(\"div\", {\n          className: \"col-sm-4\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 269\n          },\n          __self: this\n        })));\n      }\n    });\n  } //Nota: this.state mantiene el estado de las variables, es como un get pero para setear una  variables\n  // se debe ocupar\n  //Método para actualizar los datos\n\n\n  editarContacto(contacto) {\n    //Por default la variable editarContactoModal es false pero se niega este valor seteando a verdadero,\n    // y de esta manera se consigue visualizar el modal de mdificación y setearle los datos a los controles\n    this.validarContacto(contacto);\n    this.setState({\n      datosEditarContacto: contacto,\n      editarContactoModal: !this.state.editarContactoModal\n    });\n  }\n\n  render() {\n    if (this.state.loggedIn == false) {\n      return React.createElement(Redirect, {\n        to: \"/\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293\n        },\n        __self: this\n      });\n    } //Se setea a la variable local contactosReg el objeto contactos que se lleno al ejecutarse el método\n    //componentWillMount en automatico y se retorna las filas del Table más una columna con los botones de\n    //Editar y eliminar\n\n\n    let contactosReg = this.props.contactos.map(contacto => {\n      return React.createElement(\"tr\", {\n        key: contacto.Id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301\n        },\n        __self: this\n      }, contacto.Id), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 302\n        },\n        __self: this\n      }, contacto.Nombre), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303\n        },\n        __self: this\n      }, \" \", contacto.Celular), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304\n        },\n        __self: this\n      }, \" \", contacto.Sexo), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"success\",\n        size: \"sm\",\n        className: \"mr-2\",\n        onClick: this.editarContacto.bind(this, contacto),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306\n        },\n        __self: this\n      }, \"Editar\"), React.createElement(Button, {\n        color: \"danger\",\n        size: \"sm\",\n        onClick: this.eliminarContacto.bind(this, contacto.Id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307\n        },\n        __self: this\n      }, \"Eliminar\")));\n    }); // El botón Agregar cambia a true la variable nuevoContactoModal por medio del metodo toggleNuevoContactoModal\n    //Modal para modificar datos se abre en automatico cuando su atributo isOpen cambia a verdadero por medio de la variable nuevoContactoModal\n    //y se cierra cuando la misma variable cambia a false al presionarse los botones cerrar (x) y cancelar\n    //Modal para modificar datos  se abre en automatico cuando su atributo isOpen cambia a verdadero por medio de la variable editarContactoModal\n    //y se cierra cuando la misma variable cambia a false al presionarse los botones de cerrar (x) y cancelar\n    //ModalHeader: Encabezado del Modal\n    //ModalBody: Contenedor de controles\n    //ModalFooter:  Pie del Modal, se utiliza comunmente para añadir botones\n    //FormGroup: Agrupador de Controles\n    //Input propiedad value : se le puede ligar una propiedad de un objeto state, y con el método onChange asignarle\n    //al value lo que se captura.\n    // let {datosNuevoContacto} = this.state;,  se setea el estado y se almacena lo que se captura\n    // datosNuevoContacto.Nombre = e.target.value;, se setea lo que se captura en el input en la propiedad que se indica\n    // this.setState({datosNuevoContacto});, se confirma el seteo de la propiedad del objeto\n    //<tbody>{contactosReg}</tbody>, la variable local contactosReg proporciona los filas del Table\n\n    return React.createElement(\"div\", {\n      id: \"divContactos\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"App container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    }, \"Aplicaci\\xF3n de Contactos\"), React.createElement(Button, {\n      className: \"my-3\",\n      color: \"primary\",\n      onClick: this.toggleNuevoContactoModal.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339\n      },\n      __self: this\n    }, \"Agregar\"), React.createElement(Modal, {\n      isOpen: this.state.nuevoContactoModal,\n      toggle: this.toggleNuevoContactoModal.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341\n      },\n      __self: this\n    }, React.createElement(ModalHeader, {\n      toggle: this.toggleNuevoContactoModal.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    }, \"Agregar un Contacto\"), React.createElement(ModalBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }, this.state.alert_message != \"\" ? React.createElement(AlertaError, {\n      mensaje: this.state.alert_message,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344\n      },\n      __self: this\n    }) : null, React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"Nombre\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347\n      },\n      __self: this\n    }, \"Nombre\"), React.createElement(Input, {\n      style: this.validacionInput(this.state.isNullNombre),\n      onChange: e => {\n        let datosNuevoContacto = this.state.datosNuevoContacto;\n        datosNuevoContacto.Nombre = e.target.value;\n        this.setState({\n          datosNuevoContacto\n        });\n      },\n      required: \"true\",\n      maxlength: \"100\",\n      onBlur: e => {\n        if (e.target.value == '') {\n          this.setState({\n            isNullNombre: 'true'\n          });\n        } else {\n          this.setState({\n            isNullNombre: 'false',\n            alert_message: ''\n          });\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"Celular\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363\n      },\n      __self: this\n    }, \"Celular\"), React.createElement(Input, {\n      id: \"Celular\",\n      style: this.validacionInput(this.state.isNullCelular),\n      value: this.state.datosNuevoContacto.Celular,\n      onChange: e => {\n        var regex = /[^+\\d]/g;\n        let datosNuevoContacto = this.state.datosNuevoContacto;\n        datosNuevoContacto.Celular = e.target.value.replace(regex, \"\");\n        this.setState({\n          datosNuevoContacto\n        });\n      },\n      required: \"true\",\n      onBlur: e => {\n        if (e.target.value == '') {\n          this.setState({\n            isNullCelular: 'true'\n          });\n        } else {\n          this.setState({\n            isNullCelular: 'false',\n            alert_message: ''\n          });\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"Sexo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379\n      },\n      __self: this\n    }, \"Sexo\"), React.createElement(Input, {\n      id: \"Sexo\",\n      style: this.validacionInput(this.state.isNullSexo),\n      value: this.state.datosNuevoContacto.Sexo,\n      onChange: e => {\n        let datosNuevoContacto = this.state.datosNuevoContacto;\n        datosNuevoContacto.Sexo = e.target.value;\n        this.setState({\n          datosNuevoContacto\n        });\n      },\n      required: \"true\",\n      maxlength: \"3\",\n      minlength: \"3\",\n      onBlur: e => {\n        if (e.target.value == '') {\n          this.setState({\n            isNullSexo: 'true'\n          });\n        } else {\n          this.setState({\n            isNullSexo: 'false',\n            alert_message: ''\n          });\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380\n      },\n      __self: this\n    }))), React.createElement(ModalFooter, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: \"primary\",\n      onClick: this.agregarContacto.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395\n      },\n      __self: this\n    }, \"Guardar\"), React.createElement(Button, {\n      color: \"secondary\",\n      onClick: this.toggleNuevoContactoModal.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    }, \"Cancelar\"))), React.createElement(Modal, {\n      isOpen: this.state.editarContactoModal,\n      toggle: this.toggleEditarContactoModal.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      },\n      __self: this\n    }, React.createElement(ModalHeader, {\n      toggle: this.toggleEditarContactoModal.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401\n      },\n      __self: this\n    }, \"Editar un Contacto\"), React.createElement(ModalBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402\n      },\n      __self: this\n    }, this.state.alert_message != \"\" ? React.createElement(AlertaError, {\n      mensaje: this.state.alert_message,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403\n      },\n      __self: this\n    }) : null, React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"Nombre\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405\n      },\n      __self: this\n    }, \"Nombre\"), React.createElement(Input, {\n      id: \"Nombre\",\n      style: this.validacionInput(this.state.isNullNombre),\n      value: this.state.datosEditarContacto.Nombre,\n      onChange: e => {\n        let datosEditarContacto = this.state.datosEditarContacto;\n        datosEditarContacto.Nombre = e.target.value;\n        this.setState({\n          datosEditarContacto\n        });\n      },\n      required: \"true\",\n      maxlength: \"100\",\n      onBlur: e => {\n        if (e.target.value == '') {\n          this.setState({\n            isNullNombre: 'true'\n          });\n        } else {\n          this.setState({\n            isNullNombre: 'false',\n            alert_message: ''\n          });\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"Celular\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421\n      },\n      __self: this\n    }, \"Celular\"), React.createElement(Input, {\n      id: \"Celular\",\n      style: this.validacionInput(this.state.isNullCelular),\n      value: this.state.datosEditarContacto.Celular,\n      onChange: e => {\n        var regex = /[^+\\d]/g;\n        let datosEditarContacto = this.state.datosEditarContacto;\n        datosEditarContacto.Celular = e.target.value.replace(regex, \"\");\n        this.setState({\n          datosEditarContacto\n        });\n      },\n      required: \"true\",\n      onBlur: e => {\n        if (e.target.value == '') {\n          this.setState({\n            isNullCelular: 'true'\n          });\n        } else {\n          this.setState({\n            isNullCelular: 'false',\n            alert_message: ''\n          });\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"Sexo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437\n      },\n      __self: this\n    }, \"Sexo\"), React.createElement(Input, {\n      id: \"Sexo\",\n      style: this.validacionInput(this.state.isNullSexo),\n      value: this.state.datosEditarContacto.Sexo,\n      onChange: e => {\n        let datosEditarContacto = this.state.datosEditarContacto;\n        datosEditarContacto.Sexo = e.target.value;\n        this.setState({\n          datosEditarContacto\n        });\n      },\n      required: \"true\",\n      maxlength: \"3\",\n      minlength: \"3\",\n      onBlur: e => {\n        if (e.target.value == '') {\n          this.setState({\n            isNullSexo: 'true'\n          });\n        } else {\n          this.setState({\n            isNullSexo: 'false',\n            alert_message: ''\n          });\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438\n      },\n      __self: this\n    }))), React.createElement(ModalFooter, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: \"primary\",\n      onClick: this.actualizarContacto.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 453\n      },\n      __self: this\n    }, \"Guardar\"), ' ', React.createElement(Button, {\n      color: \"secondary\",\n      onClick: this.toggleEditarContactoModal.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 454\n      },\n      __self: this\n    }, \"Cancelar\"))), React.createElement(Table, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460\n      },\n      __self: this\n    }, \"#\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461\n      },\n      __self: this\n    }, \"Nombre\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 462\n      },\n      __self: this\n    }, \"Celular\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463\n      },\n      __self: this\n    }, \"Sexo\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464\n      },\n      __self: this\n    }, \"Acciones\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467\n      },\n      __self: this\n    }, contactosReg))));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    contactos: state.contactos\n  };\n}\n\nexport default connect(mapStateToProps, {\n  fetchContactos,\n  saveContactos,\n  updateContactos,\n  deleteContactos\n})(Contactos);","map":{"version":3,"sources":["C:\\PROYECTOS\\VisualStudioNET\\WEBREACTREDUXCONTACTOS\\webreactreduxcontactos\\src\\componentes\\Contactos.js"],"names":["React","Component","Label","FormGroup","Input","Modal","ModalHeader","ModalBody","ModalFooter","Table","Button","Redirect","confirmAlert","FontAwesomeIcon","connect","ContactosList","fetchContactos","saveContactos","updateContactos","deleteContactos","AlertaError","Contactos","componentDidMount","refrescarContactos","constructor","props","token","localStorage","getItem","loggedIn","state","isNullNombre","isNullCelular","isNullSexo","alert_message","contactos","datosNuevoContacto","Nombre","Celular","Sexo","datosEditarContacto","Id","nuevoContactoModal","editarContactoModal","componentWillReceiveProps","nextProps","toggleNuevoContactoModal","setState","toggleEditarContactoModal","validacionInput","e","borderColor","validarContacto","contacto","nombre","celular","sexo","alert","valAlert","valContacto","agregarContacto","then","response","push","data","err","json","catch","error","actualizarContacto","eliminarContacto","id","customUI","onClose","editarContacto","render","contactosReg","map","bind","target","value","regex","replace","mapStateToProps"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport {Label, FormGroup, Input, Modal, ModalHeader, ModalBody, ModalFooter, Table, Button} from 'reactstrap';\r\nimport { Redirect} from 'react-router-dom';\r\nimport { confirmAlert } from 'react-confirm-alert';\r\nimport 'react-confirm-alert/src/react-confirm-alert.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {connect} from 'react-redux';\r\nimport ContactosList from './ContactosList';\r\nimport {fetchContactos, saveContactos, updateContactos, deleteContactos} from '../actions/actionsContactos';\r\nimport AlertaError from './AlertaError';\r\n/*import Navegacion from './Navegacion';*/\r\n//Una Clase que extiende del component de React se comvierte en una etiqueta html\r\nclass Contactos extends Component  {\r\n  componentDidMount()\r\n  {\r\n    this.refrescarContactos();\r\n  }\r\n  constructor(props){\r\n    super(props);\r\n    const token = localStorage.getItem(\"token\");\r\n    let loggedIn = true;\r\n    if (token==null){\r\n      loggedIn = false;\r\n    }\r\n    this.state = {\r\n      isNullNombre: '',\r\n      isNullCelular: '',\r\n      isNullSexo: '',\r\n      alert_message:'',\r\n      contactos: [],\r\n      datosNuevoContacto: {\r\n        Nombre: '',\r\n        Celular: '',\r\n        Sexo: ''\r\n      },\r\n      datosEditarContacto: {\r\n        Id: '',\r\n        Nombre: '',\r\n        Celular: '',\r\n        Sexo: ''\r\n      },\r\n      nuevoContactoModal: false,\r\n      editarContactoModal: false,\r\n      loggedIn\r\n    }\r\n  }\r\n  //Se declara en el objeto state las variables que mantendran el valor\r\n  //Contactos - Los datos que llenaran el Table\r\n  //datosNuevoContacto - Los datos para la Alta\r\n  //datosEditarContacto - Los datos para la modificación\r\n  //nuevoContactoModal - Para la visualización y cierre de la ventana modal de Alta\r\n //editarContactoModal - Para la visualización  y cierre de la ventana modal de modificación\r\n\r\n //Método que refrescara el Table\r\n\r\n  refrescarContactos(){\r\n    this.props.fetchContactos();\r\n    \r\n  }\r\n  componentWillReceiveProps(nextProps){\r\n     //entra cada vez que se ejecuta un evento transaccional\r\n  }\r\n//Método que niega el valor de la variable nuevoContactoModal inicializada en false, esto\r\n//permite mostrar el Modal para la Alta y inicializa los datos del objeto datosNuevoContacto, y\r\n//Se regresa el valor de la variable nuevoContactoModal a false cuando se pulsa el botón de cerrar y\r\n//cuando se pulsa el botón de cancelar\r\n  toggleNuevoContactoModal() {\r\n    this.setState({\r\n      isNullNombre:'',\r\n      isNullCelular:'',\r\n      isNullSexo:'',\r\n      nuevoContactoModal: !this.state.nuevoContactoModal,\r\n      datosNuevoContacto: {\r\n        Nombre: '',\r\n        Celular: '',\r\n        Sexo: ''\r\n      }\r\n    });\r\n  }\r\n  //Método que niega el valor de la variable editarContactoModal inicializada en false, esto\r\n  //permite mostrar el Modal para la Modificación y\r\n  //se regresa el valor de la variable editarContactoModal a false cuando se pulsa el botón de cerrar y\r\n  //cuando se pulsa el botón de cancelar\r\n  toggleEditarContactoModal() {\r\n    //Este metodo se dispara cuando se cierra la ventana modal de editar, y cuando se pulsa el botón de Cancelar\r\n    // convierte el valor de la variable editarContactoModal a false\r\n  this.setState({\r\n    editarContactoModal: !this.state.editarContactoModal\r\n  });\r\n}\r\nvalidacionInput(e){\r\n\r\n  if (e == 'true'){\r\n\r\n    return {borderColor: '#dc3545'}\r\n  }\r\n  if (e == 'false'){\r\n    return  {borderColor: '#28a745'}\r\n  }\r\n  return  {borderColor: 'none'};\r\n}\r\n\r\nvalidarContacto(contacto) {\r\n  var nombre='false', celular='false', sexo='false', alert='', valAlert=false, valContacto= true;\r\n\r\n  if (contacto.Nombre=='')\r\n  {\r\n    nombre ='true';\r\n    valAlert=true;\r\n  }\r\n\r\n  if (contacto.Celular=='')\r\n  {\r\n\r\n    celular = 'true';\r\n    valAlert=true;\r\n  }\r\n\r\n  if (contacto.Sexo=='')\r\n  {\r\n    sexo = 'true';\r\n    valAlert=true;\r\n  }\r\n  \r\n  if (valAlert) {\r\n    alert = 'Introduzca la información que se le solicita'\r\n    valContacto = false;\r\n  }\r\n  this.setState({\r\n    isNullNombre: nombre,\r\n    isNullCelular: celular,\r\n    isNullSexo: sexo,\r\n    alert_message: alert\r\n  });\r\n\r\n  return valContacto;\r\n}\r\n\r\n\r\n//Método que permite guardar los datos capturados en el modal de Alta\r\n  agregarContacto (){\r\n\r\n    let {Nombre, Celular, Sexo} = this.state.datosNuevoContacto;\r\nalert('entro');\r\n    if (this.validarContacto(this.state.datosNuevoContacto)) {\r\n    \r\n      this.props.saveContactos({Nombre, Celular, Sexo}).then(\r\n        (response)=>{\r\n          //Se setea la variable de state contactos, los simbolo {} permiten usarla para setearla por medio de let\r\n          //this.state contiene los contactos que se renderizaron en el Table\r\n            let {contactos} = this.state;\r\n            //Se agrega al final el contacto que devolvio el metodo post de la api contactos\r\n            contactos.push(response.data);\r\n            //Inicializa el estado de las variables nuevoContactoModal y el objeto datosNuevoContacto\r\n            this.setState({contactos, \r\n              nuevoContactoModal:false, \r\n              datosNuevoContacto: {\r\n              Nombre: '',\r\n              Celular: '',\r\n              Sexo: ''\r\n            }, \r\n            alert_message: '',\r\n            isNullNombre: '', \r\n            isNullCelular:'', \r\n            isNullSexo: ''});\r\n        }, \r\n        (err) => err.response.json().then(()=>{\r\n          //Entra cuando los errores son superficiales, por ejemplo cuando los datos que se capturan no \r\n          //coinciden con el tipo de dato \r\n          this.setState({\r\n            alert_message: 'No se pudo agregar el contacto'\r\n          })\r\n        }\r\n        )\r\n      ).catch(error=>{\r\n        //entra cuando los errores se propagan desde la base de datos, por ejemplo cuando la logitud de un \r\n        //  es superior al campo de la base de datos\r\n        this.setState({\r\n          alert_message: 'No se pudo agregar el contacto'\r\n        });\r\n      });\r\n    }\r\n  \r\n  }\r\n\r\n//Método que permite guardar los datos capturados en el modal de Modificación\r\n  actualizarContacto()\r\n  {\r\n    let {Id, Nombre, Celular, Sexo} = this.state.datosEditarContacto;\r\n    if (this.validarContacto(this.state.datosEditarContacto)) {\r\n      this.props.updateContactos({Id, Nombre, Celular, Sexo}).then(\r\n        ()=>{\r\n            //Se refresca el Table\r\n            this.refrescarContactos();\r\n            //Inicializa el estado de las variables nuevoContactoModal y el objeto datosNuevoContacto\r\n            this.setState({editarContactoModal: false, \r\n              datosEditarContacto: {\r\n              Id: '',\r\n              Nombre: '',\r\n              Celular: '',\r\n              Sexo: ''\r\n            }, \r\n            alert_message: '', \r\n            isNullNombre: '', \r\n            isNullCelular:'', \r\n            isNullSexo: ''});\r\n        },\r\n        (err) => err.response.json().then(()=>{\r\n          this.setState({\r\n            alert_message: 'No se pudo actualizar el contacto'\r\n          })\r\n          }\r\n        )\r\n      ).catch(error=>{\r\n        //entra cuando los errores se propagan desde la base de datos, por ejemplo cuando la logitud de un \r\n        //  es superior al campo de la base de datos\r\n        this.setState({\r\n          alert_message: 'No se pudo actualizar el contacto'\r\n        });\r\n      });\r\n    }\r\n  }\r\n//Método para eliminar un Contacto\r\n eliminarContacto(id){\r\n\r\n   confirmAlert({\r\n    customUI: ({ onClose }) => {\r\n      return (\r\n        <div className='custom-ui'>\r\n\r\n          <h1 className=\"glyphicon glyphicon-warning-sign\">\r\n            <FontAwesomeIcon className=\"mr-3\" icon=\"exclamation-triangle\" />\r\n            Esta seguro de eliminar el registro?</h1>\r\n          <div className=\"btn-toolbar row\" role=\"toolbar\">\r\n            <div className=\"col-sm-4\"></div>\r\n          <div className=\"btn-group col-sm-4\">\r\n              <Button color=\"secondary\" size=\"sm\" className=\"mr-3\" onClick={onClose}>\r\n                  <FontAwesomeIcon className=\"mr-1\" icon=\"times\" />\r\n                  No\r\n               </Button>\r\n              <Button color=\"primary\" size=\"sm\" className=\"btn btn-default \"\r\n                    onClick={() => {\r\n                      this.props.deleteContactos(id).then(\r\n                        ()=>{\r\n                            //Se refresca el Table\r\n                            this.refrescarContactos();\r\n                            onClose();\r\n                        }, \r\n                        (error) => error.response.json().then(()=>\r\n                          {\r\n                            this.setState({\r\n                              alert_message: 'No se pudo eliminar el contacto'\r\n                            })\r\n                          }\r\n                        )\r\n                      ).catch(error=>{\r\n                        //entra cuando los errores se propagan desde la base de datos, por ejemplo cuando la logitud de un \r\n                        //  es superior al campo de la base de datos\r\n                        this.setState({\r\n                          alert_message: 'No se pudo eliminar el contacto'\r\n                        });\r\n                      });\r\n                    }}\r\n                >\r\n                  <FontAwesomeIcon className=\"mr-1\" icon=\"check\" />\r\n                   Si\r\n              </Button>\r\n              </div>\r\n                <div className=\"col-sm-4\"></div>\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n    });\r\n }\r\n\r\n  //Nota: this.state mantiene el estado de las variables, es como un get pero para setear una  variables\r\n  // se debe ocupar\r\n  //Método para actualizar los datos\r\n  editarContacto (contacto)\r\n  {\r\n    //Por default la variable editarContactoModal es false pero se niega este valor seteando a verdadero,\r\n    // y de esta manera se consigue visualizar el modal de mdificación y setearle los datos a los controles\r\n    this.validarContacto(contacto);\r\n    this.setState({\r\n     datosEditarContacto: contacto, editarContactoModal:! this.state.editarContactoModal\r\n   });\r\n  }\r\n\r\n  render(){\r\n    if(this.state.loggedIn==false)\r\n    {\r\n      return <Redirect  to=\"/\" />\r\n    }\r\n    //Se setea a la variable local contactosReg el objeto contactos que se lleno al ejecutarse el método\r\n    //componentWillMount en automatico y se retorna las filas del Table más una columna con los botones de\r\n    //Editar y eliminar\r\n    let contactosReg = this.props.contactos.map((contacto)=>{\r\n      return(\r\n        <tr key={contacto.Id}>\r\n          <td>{contacto.Id}</td>\r\n          <td>{contacto.Nombre}</td>\r\n          <td> {contacto.Celular}</td>\r\n          <td> {contacto.Sexo}</td>\r\n          <td>\r\n            <Button color=\"success\" size=\"sm\" className=\"mr-2\" onClick={this.editarContacto.bind(this, contacto)}>Editar</Button>\r\n            <Button color=\"danger\" size=\"sm\" onClick={this.eliminarContacto.bind(this,contacto.Id)}>Eliminar</Button>\r\n          </td>\r\n        </tr>\r\n      )\r\n    });\r\n\r\n    // El botón Agregar cambia a true la variable nuevoContactoModal por medio del metodo toggleNuevoContactoModal\r\n\r\n    //Modal para modificar datos se abre en automatico cuando su atributo isOpen cambia a verdadero por medio de la variable nuevoContactoModal\r\n    //y se cierra cuando la misma variable cambia a false al presionarse los botones cerrar (x) y cancelar\r\n\r\n    //Modal para modificar datos  se abre en automatico cuando su atributo isOpen cambia a verdadero por medio de la variable editarContactoModal\r\n    //y se cierra cuando la misma variable cambia a false al presionarse los botones de cerrar (x) y cancelar\r\n\r\n    //ModalHeader: Encabezado del Modal\r\n    //ModalBody: Contenedor de controles\r\n    //ModalFooter:  Pie del Modal, se utiliza comunmente para añadir botones\r\n\r\n    //FormGroup: Agrupador de Controles\r\n    //Input propiedad value : se le puede ligar una propiedad de un objeto state, y con el método onChange asignarle\r\n    //al value lo que se captura.\r\n    // let {datosNuevoContacto} = this.state;,  se setea el estado y se almacena lo que se captura\r\n    // datosNuevoContacto.Nombre = e.target.value;, se setea lo que se captura en el input en la propiedad que se indica\r\n    // this.setState({datosNuevoContacto});, se confirma el seteo de la propiedad del objeto\r\n\r\n    //<tbody>{contactosReg}</tbody>, la variable local contactosReg proporciona los filas del Table\r\n    return (\r\n      <div id=\"divContactos\">\r\n\r\n      <div className=\"App container\">\r\n        <h2>Aplicación de Contactos</h2>\r\n\r\n        <Button  className=\"my-3\" color=\"primary\" onClick={this.toggleNuevoContactoModal.bind(this)}>Agregar</Button>\r\n        \r\n        <Modal isOpen={this.state.nuevoContactoModal}  toggle={this.toggleNuevoContactoModal.bind(this)}>\r\n          <ModalHeader toggle={this.toggleNuevoContactoModal.bind(this)}>Agregar un Contacto</ModalHeader>\r\n          <ModalBody>\r\n          {this.state.alert_message!=\"\"?<AlertaError mensaje={this.state.alert_message} />:null}\r\n        \r\n            <FormGroup>\r\n              <Label for=\"Nombre\">Nombre</Label>\r\n              <Input style={this.validacionInput(this.state.isNullNombre)} onChange={(e)=>{\r\n                let {datosNuevoContacto} = this.state;\r\n                datosNuevoContacto.Nombre = e.target.value;\r\n                this.setState({datosNuevoContacto});\r\n\r\n              }} required=\"true\" maxlength=\"100\" onBlur={(e)=>{\r\n                if (e.target.value == '')\r\n                  {\r\n                    this.setState({isNullNombre: 'true'});\r\n                  }else {\r\n                    this.setState({isNullNombre: 'false', alert_message: ''});\r\n                  }\r\n                }}/>\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for=\"Celular\">Celular</Label>\r\n              <Input  id=\"Celular\" style={this.validacionInput(this.state.isNullCelular)} value={this.state.datosNuevoContacto.Celular} onChange={(e)=>{\r\n                var regex = /[^+\\d]/g;\r\n                let {datosNuevoContacto} = this.state;\r\n                datosNuevoContacto.Celular = e.target.value.replace(regex,\"\");\r\n                this.setState({datosNuevoContacto});\r\n              }} required = \"true\" onBlur={(e)=>{\r\n                if (e.target.value == '')\r\n                  {\r\n                    this.setState({isNullCelular: 'true'});\r\n                  }else {\r\n                    this.setState({isNullCelular: 'false', alert_message: ''});\r\n                  }\r\n                }}/>\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for=\"Sexo\">Sexo</Label>\r\n              <Input  id=\"Sexo\" style={this.validacionInput(this.state.isNullSexo)} value={this.state.datosNuevoContacto.Sexo} onChange={(e)=>{\r\n                let {datosNuevoContacto} = this.state;\r\n                datosNuevoContacto.Sexo = e.target.value;\r\n                this.setState({datosNuevoContacto});\r\n              }} required=\"true\" maxlength=\"3\" minlength=\"3\" onBlur={(e)=>{\r\n                if (e.target.value == '')\r\n                  {\r\n                    this.setState({isNullSexo: 'true'});\r\n                  }else {\r\n                    this.setState({isNullSexo: 'false', alert_message: ''});\r\n                  }\r\n                }}/>\r\n            </FormGroup>\r\n          </ModalBody>\r\n         <ModalFooter>\r\n           <Button color=\"primary\" onClick={this.agregarContacto.bind(this)}>Guardar</Button>\r\n           <Button color=\"secondary\" onClick={this.toggleNuevoContactoModal.bind(this)}>Cancelar</Button>\r\n         </ModalFooter>\r\n        </Modal>\r\n\r\n        <Modal isOpen={this.state.editarContactoModal}  toggle={this.toggleEditarContactoModal.bind(this)}>\r\n         <ModalHeader toggle={this.toggleEditarContactoModal.bind(this)}>Editar un Contacto</ModalHeader>\r\n         <ModalBody>\r\n         {this.state.alert_message!=\"\"?<AlertaError mensaje={this.state.alert_message} />:null}\r\n          <FormGroup>\r\n            <Label for=\"Nombre\">Nombre</Label>\r\n            <Input  id=\"Nombre\" style={this.validacionInput(this.state.isNullNombre)} value={this.state.datosEditarContacto.Nombre} onChange={(e)=>{\r\n              let {datosEditarContacto} = this.state;\r\n              datosEditarContacto.Nombre = e.target.value;\r\n              this.setState({datosEditarContacto});\r\n             \r\n            }} required=\"true\" maxlength=\"100\" onBlur={(e)=>{\r\n              if (e.target.value == '')\r\n                {\r\n                  this.setState({isNullNombre: 'true'});\r\n                }else {\r\n                  this.setState({isNullNombre: 'false', alert_message: ''});\r\n                }\r\n              }}/>\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <Label for=\"Celular\">Celular</Label>\r\n            <Input  id=\"Celular\" style={this.validacionInput(this.state.isNullCelular)} value={this.state.datosEditarContacto.Celular} onChange={(e)=>{\r\n               var regex = /[^+\\d]/g;\r\n              let {datosEditarContacto} = this.state;\r\n              datosEditarContacto.Celular = e.target.value.replace(regex,\"\");\r\n              this.setState({datosEditarContacto});\r\n            }} required=\"true\" onBlur={(e)=>{\r\n              if (e.target.value == '')\r\n                {\r\n                  this.setState({isNullCelular: 'true'});\r\n                }else {\r\n                  this.setState({isNullCelular: 'false', alert_message: ''});\r\n                }\r\n              }}/>\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <Label for=\"Sexo\">Sexo</Label>\r\n            <Input id=\"Sexo\" style={this.validacionInput(this.state.isNullSexo)}  value={this.state.datosEditarContacto.Sexo} onChange={(e)=>{\r\n              let {datosEditarContacto} = this.state;\r\n              datosEditarContacto.Sexo = e.target.value;\r\n              this.setState({datosEditarContacto});\r\n            }} required=\"true\" maxlength=\"3\" minlength=\"3\" onBlur={(e)=>{\r\n              if (e.target.value == '')\r\n                {\r\n                  this.setState({isNullSexo: 'true'});\r\n                }else {\r\n                  this.setState({isNullSexo: 'false', alert_message: ''});\r\n                }\r\n              }}/>\r\n          </FormGroup>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"primary\" onClick={this.actualizarContacto.bind(this)}>Guardar</Button>{' '}\r\n          <Button color=\"secondary\" onClick={this.toggleEditarContactoModal.bind(this)}>Cancelar</Button>\r\n        </ModalFooter>\r\n       </Modal>\r\n        <Table>\r\n          <thead>\r\n            <tr>\r\n              <th>#</th>\r\n              <th>Nombre</th>\r\n              <th>Celular</th>\r\n              <th>Sexo</th>\r\n              <th>Acciones</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {contactosReg}\r\n            \r\n          </tbody>\r\n        </Table>\r\n        \r\n      </div>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps (state)\r\n{\r\n\r\n  return {\r\n    contactos: state.contactos\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, {fetchContactos, saveContactos, updateContactos, deleteContactos})(Contactos);\r\n"]},"metadata":{},"sourceType":"module"}