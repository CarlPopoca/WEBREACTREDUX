{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar Status = {\n  PENDING: 'pending',\n  LOADING: 'loading',\n  LOADED: 'loaded',\n  FAILED: 'failed'\n};\n\nvar ImageLoader = function (_React$Component) {\n  _inherits(ImageLoader, _React$Component);\n\n  function ImageLoader(props) {\n    _classCallCheck(this, ImageLoader);\n\n    var _this = _possibleConstructorReturn(this, (ImageLoader.__proto__ || Object.getPrototypeOf(ImageLoader)).call(this, props));\n\n    _this.state = {\n      status: props.src ? Status.LOADING : Status.PENDING\n    };\n    if (_react2.default.Children.count(props.children) !== 3) console.error('wrong # of children provided to ImageLoader');\n    return _this;\n  }\n\n  _createClass(ImageLoader, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      if (this.state.status === Status.LOADING) {\n        this.createLoader();\n      }\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if (this.props.src !== nextProps.src) {\n        this.setState({\n          status: nextProps.src ? Status.LOADING : Status.PENDING\n        });\n      }\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      if (this.state.status === Status.LOADING && !this.img) {\n        this.createLoader();\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.destroyLoader();\n    }\n  }, {\n    key: 'createLoader',\n    value: function createLoader() {\n      this.destroyLoader(); // We can only have one loader at a time.\n\n      var img = new Image();\n      img.onload = this.handleLoad.bind(this);\n      img.onerror = this.handleError.bind(this);\n      img.src = this.props.src; // if srcSet is not passed in then use src for srcset\n      // Setting srcset to a non-string is a bad idea. E.g. img.srcset = undefined actually sets srcset to the string \"undefined\", causing a load failure)\n\n      img.srcset = this.props.srcSet || this.props.src;\n      this.img = img;\n    }\n  }, {\n    key: 'destroyLoader',\n    value: function destroyLoader() {\n      if (this.img) {\n        this.img.onload = null;\n        this.img.onerror = null;\n        this.img = null;\n      }\n    }\n  }, {\n    key: 'handleLoad',\n    value: function handleLoad(event) {\n      this.destroyLoader();\n      this.setState({\n        status: Status.LOADED\n      });\n      if (this.props.onLoad) this.props.onLoad(event);\n    }\n  }, {\n    key: 'handleError',\n    value: function handleError(error) {\n      this.destroyLoader();\n      this.setState({\n        status: Status.FAILED\n      });\n      if (this.props.onError) this.props.onError(error);\n    }\n  }, {\n    key: 'getClassName',\n    value: function getClassName() {\n      var className = 'imageloader imageloader-' + this.state.status;\n      if (this.props.className) className = className + ' ' + this.props.className;\n      return className;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          src = _props.src,\n          srcSet = _props.srcSet,\n          onLoad = _props.onLoad,\n          onError = _props.onError,\n          wrapperProps = _props.wrapperProps,\n          children = _props.children;\n\n      var childrenArray = _react2.default.Children.toArray(children);\n\n      return _react2.default.createElement('div', _extends({}, wrapperProps, {\n        className: this.getClassName()\n      }), this.state.status === Status.LOADED && _react2.default.cloneElement(childrenArray[0], {\n        src: src,\n        srcSet: srcSet\n      }), this.state.status === Status.FAILED && childrenArray[1], (this.state.status === Status.LOADING || this.state.status === Status.PENDING) && childrenArray[2]);\n    }\n  }]);\n\n  return ImageLoader;\n}(_react2.default.Component);\n\nImageLoader.propTypes = {\n  src: _propTypes2.default.string.isRequired,\n  srcSet: _propTypes2.default.string,\n  onLoad: _propTypes2.default.func,\n  onError: _propTypes2.default.func,\n  children: _propTypes2.default.arrayOf(_propTypes2.default.node) // Allow any extras\n\n};\nexports.default = ImageLoader;","map":null,"metadata":{},"sourceType":"script"}