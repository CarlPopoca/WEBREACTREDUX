{"ast":null,"code":"var _jsxFileName = \"C:\\\\PROYECTOS\\\\VisualStudioNET\\\\WEBREACTREDUXCONTACTOS\\\\webreactreduxcontactos\\\\src\\\\componentes\\\\Contactos.js\";\nimport React, { Component } from 'react';\nimport { Label, FormGroup, Input, Modal, ModalHeader, ModalBody, ModalFooter, Table, Button } from 'reactstrap';\nimport { Redirect } from 'react-router-dom';\nimport { confirmAlert } from 'react-confirm-alert';\nimport 'react-confirm-alert/src/react-confirm-alert.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { connect } from 'react-redux';\nimport ContactosList from './ContactosList';\nimport { fetchContactos, saveContactos, updateContactos, deleteContactos } from '../actions/actionsContactos';\nimport AlertaError from './AlertaError';\n/*import Navegacion from './Navegacion';*/\n//Una Clase que extiende del component de React se comvierte en una etiqueta html\n\nclass Contactos extends Component {\n  componentDidMount() {\n    this.refrescarContactos();\n  }\n\n  constructor(props) {\n    super(props);\n    const token = localStorage.getItem(\"token\");\n    let loggedIn = true;\n\n    if (token == null) {\n      loggedIn = false;\n    }\n\n    this.state = {\n      alert_message: '',\n      contactos: [],\n      datosNuevoContacto: {\n        Nombre: '',\n        Celular: '',\n        Sexo: ''\n      },\n      datosEditarContacto: {\n        Id: '',\n        Nombre: '',\n        Celular: '',\n        Sexo: ''\n      },\n      nuevoContactoModal: false,\n      editarContactoModal: false,\n      loggedIn\n    };\n  } //Se declara en el objeto state las variables que mantendran el valor\n  //Contactos - Los datos que llenaran el Table\n  //datosNuevoContacto - Los datos para la Alta\n  //datosEditarContacto - Los datos para la modificación\n  //nuevoContactoModal - Para la visualización y cierre de la ventana modal de Alta\n  //editarContactoModal - Para la visualización  y cierre de la ventana modal de modificación\n  //Método que refrescara el Table\n\n\n  refrescarContactos() {\n    this.props.fetchContactos();\n  }\n\n  componentWillReceiveProps(nextProps) {} //entra cada vez que se ejecuta un evento transaccional\n  //Método que niega el valor de la variable nuevoContactoModal inicializada en false, esto\n  //permite mostrar el Modal para la Alta y inicializa los datos del objeto datosNuevoContacto, y\n  //Se regresa el valor de la variable nuevoContactoModal a false cuando se pulsa el botón de cerrar y\n  //cuando se pulsa el botón de cancelar\n\n\n  toggleNuevoContactoModal() {\n    this.setState({\n      nuevoContactoModal: !this.state.nuevoContactoModal,\n      datosNuevoContacto: {\n        Nombre: '',\n        Celular: '',\n        Sexo: ''\n      }\n    });\n  } //Método que niega el valor de la variable editarContactoModal inicializada en false, esto\n  //permite mostrar el Modal para la Modificación y\n  //se regresa el valor de la variable editarContactoModal a false cuando se pulsa el botón de cerrar y\n  //cuando se pulsa el botón de cancelar\n\n\n  toggleEditarContactoModal() {\n    //Este metodo se dispara cuando se cierra la ventana modal de editar, y cuando se pulsa el botón de Cancelar\n    // convierte el valor de la variable editarContactoModal a false\n    this.setState({\n      editarContactoModal: !this.state.editarContactoModal\n    });\n  } //Método que permite guardar los datos capturados en el modal de Alta\n\n\n  agregarContacto() {\n    let _this$state$datosNuev = this.state.datosNuevoContacto,\n        Nombre = _this$state$datosNuev.Nombre,\n        Celular = _this$state$datosNuev.Celular,\n        Sexo = _this$state$datosNuev.Sexo;\n    let errors = {};\n    errors.title = \"hubo error\";\n    this.setState({\n      errors\n    });\n    const isValid = Object.keys(errors).length === 0;\n    this.props.saveContactos({\n      Nombre,\n      Celular,\n      Sexo\n    }).then(response => {\n      //Se setea la variable de state contactos, los simbolo {} permiten usarla para setearla por medio de let\n      //this.state contiene los contactos que se renderizaron en el Table\n      let contactos = this.state.contactos; //Se agrega al final el contacto que devolvio el metodo post de la api contactos\n\n      contactos.push(response.data); //Inicializa el estado de las variables nuevoContactoModal y el objeto datosNuevoContacto\n\n      this.setState({\n        contactos,\n        nuevoContactoModal: false,\n        datosNuevoContacto: {\n          Nombre: '',\n          Celular: '',\n          Sexo: ''\n        },\n        alert_message: ''\n      });\n    }, err => err.response.json().then(() => {\n      //Entra cuando los errores son superficiales, por ejemplo cuando los datos que se capturan no \n      //coinciden con el tipo de dato \n      this.setState({\n        alert_message: 'No se pudo agregar el contacto'\n      });\n    })).catch(error => {\n      //entra cuando los errores se propagan desde la base de datos, por ejemplo cuando la logitud de un \n      //  es superior al campo de la base de datos\n      this.setState({\n        alert_message: 'No se pudo agregar el contacto'\n      });\n    });\n  } //Método que permite guardar los datos capturados en el modal de Modificación\n\n\n  actualizarContacto() {\n    let _this$state$datosEdit = this.state.datosEditarContacto,\n        Id = _this$state$datosEdit.Id,\n        Nombre = _this$state$datosEdit.Nombre,\n        Celular = _this$state$datosEdit.Celular,\n        Sexo = _this$state$datosEdit.Sexo;\n    this.props.updateContactos({\n      Id,\n      Nombre,\n      Celular,\n      Sexo\n    }).then(() => {\n      //Se refresca el Table\n      this.refrescarContactos(); //Inicializa el estado de las variables nuevoContactoModal y el objeto datosNuevoContacto\n\n      this.setState({\n        editarContactoModal: false,\n        datosEditarContacto: {\n          Id: '',\n          Nombre: '',\n          Celular: '',\n          Sexo: ''\n        },\n        alert_message: ''\n      });\n    }, err => err.response.json().then(() => {\n      this.setState({\n        alert_message: 'No se pudo actualizar el contacto'\n      });\n    })).catch(error => {\n      //entra cuando los errores se propagan desde la base de datos, por ejemplo cuando la logitud de un \n      //  es superior al campo de la base de datos\n      this.setState({\n        alert_message: 'No se pudo actualizar el contacto'\n      });\n    });\n  } //Método para eliminar un Contacto\n\n\n  eliminarContacto(id) {\n    confirmAlert({\n      customUI: ({\n        onClose\n      }) => {\n        return React.createElement(\"div\", {\n          className: \"custom-ui\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 165\n          },\n          __self: this\n        }, React.createElement(\"h1\", {\n          className: \"glyphicon glyphicon-warning-sign\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 167\n          },\n          __self: this\n        }, React.createElement(FontAwesomeIcon, {\n          className: \"mr-3\",\n          icon: \"exclamation-triangle\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 168\n          },\n          __self: this\n        }), \"Esta seguro de eliminar el registro?\"), React.createElement(\"div\", {\n          className: \"btn-toolbar row\",\n          role: \"toolbar\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 170\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"col-sm-4\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 171\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"btn-group col-sm-4\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 172\n          },\n          __self: this\n        }, React.createElement(Button, {\n          color: \"secondary\",\n          size: \"sm\",\n          className: \"mr-3\",\n          onClick: onClose,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 173\n          },\n          __self: this\n        }, React.createElement(FontAwesomeIcon, {\n          className: \"mr-1\",\n          icon: \"times\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 174\n          },\n          __self: this\n        }), \"No\"), React.createElement(Button, {\n          color: \"primary\",\n          size: \"sm\",\n          className: \"btn btn-default \",\n          onClick: () => {\n            this.props.deleteContactos({\n              id\n            }).then(() => {\n              //Se refresca el Table\n              this.refrescarContactos();\n              onClose();\n            }, error => error.response.json().then(({\n              error\n            }) => this.setState({\n              alert_message: 'No se pudo eliminar el contacto'\n            })));\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 177\n          },\n          __self: this\n        }, React.createElement(FontAwesomeIcon, {\n          className: \"mr-1\",\n          icon: \"check\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 193\n          },\n          __self: this\n        }), \"Si\")), React.createElement(\"div\", {\n          className: \"col-sm-4\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 197\n          },\n          __self: this\n        })));\n      }\n    });\n  } //Nota: this.state mantiene el estado de las variables, es como un get pero para setear una  variables\n  // se debe ocupar\n  //Método para actualizar los datos\n\n\n  editarContacto(Id, Nombre, Celular, Sexo) {\n    //Por default la variable editarContactoModal es false pero se niega este valor seteando a verdadero,\n    // y de esta manera se consigue visualizar el modal de mdificación y setearle los datos a los controles\n    this.setState({\n      datosEditarContacto: {\n        Id,\n        Nombre,\n        Celular,\n        Sexo\n      },\n      editarContactoModal: !this.state.editarContactoModal\n    });\n  }\n\n  render() {\n    if (this.state.loggedIn == false) {\n      return React.createElement(Redirect, {\n        to: \"/\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      });\n    } //Se setea a la variable local contactosReg el objeto contactos que se lleno al ejecutarse el método\n    //componentWillMount en automatico y se retorna las filas del Table más una columna con los botones de\n    //Editar y eliminar\n\n\n    let contactosReg = this.props.contactos.map(contacto => {\n      return React.createElement(\"tr\", {\n        key: contacto.Id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }, contacto.Id), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }, contacto.Nombre), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }, \" \", contacto.Celular), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }, \" \", contacto.Sexo), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"success\",\n        size: \"sm\",\n        className: \"mr-2\",\n        onClick: this.editarContacto.bind(this, contacto.Id, contacto.Nombre, contacto.Celular, contacto.Sexo),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }, \"Editar\"), React.createElement(Button, {\n        color: \"danger\",\n        size: \"sm\",\n        onClick: this.eliminarContacto.bind(this, contacto.Id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        },\n        __self: this\n      }, \"Eliminar\")));\n    }); // El botón Agregar cambia a true la variable nuevoContactoModal por medio del metodo toggleNuevoContactoModal\n    //Modal para modificar datos se abre en automatico cuando su atributo isOpen cambia a verdadero por medio de la variable nuevoContactoModal\n    //y se cierra cuando la misma variable cambia a false al presionarse los botones cerrar (x) y cancelar\n    //Modal para modificar datos  se abre en automatico cuando su atributo isOpen cambia a verdadero por medio de la variable editarContactoModal\n    //y se cierra cuando la misma variable cambia a false al presionarse los botones de cerrar (x) y cancelar\n    //ModalHeader: Encabezado del Modal\n    //ModalBody: Contenedor de controles\n    //ModalFooter:  Pie del Modal, se utiliza comunmente para añadir botones\n    //FormGroup: Agrupador de Controles\n    //Input propiedad value : se le puede ligar una propiedad de un objeto state, y con el método onChange asignarle\n    //al value lo que se captura.\n    // let {datosNuevoContacto} = this.state;,  se setea el estado y se almacena lo que se captura\n    // datosNuevoContacto.Nombre = e.target.value;, se setea lo que se captura en el input en la propiedad que se indica\n    // this.setState({datosNuevoContacto});, se confirma el seteo de la propiedad del objeto\n    //<tbody>{contactosReg}</tbody>, la variable local contactosReg proporciona los filas del Table\n\n    return React.createElement(\"div\", {\n      id: \"divContactos\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"App container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }, \"Aplicaci\\xF3n de Contactos\"), React.createElement(Button, {\n      className: \"my-3\",\n      color: \"primary\",\n      onClick: this.toggleNuevoContactoModal.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, \"Agregar\"), React.createElement(Modal, {\n      isOpen: this.state.nuevoContactoModal,\n      toggle: this.toggleNuevoContactoModal.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }, React.createElement(ModalHeader, {\n      toggle: this.toggleNuevoContactoModal.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    }, \"Agregar un Contacto\"), React.createElement(ModalBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }, this.state.alert_message != \"\" ? React.createElement(AlertaError, {\n      mensaje: this.state.alert_message,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }) : null, React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"Nombre\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }, \"Nombre\"), React.createElement(Input, {\n      id: \"Nombre\",\n      value: this.state.datosNuevoContacto.Nombre,\n      onChange: e => {\n        let datosNuevoContacto = this.state.datosNuevoContacto;\n        datosNuevoContacto.Nombre = e.target.value;\n        this.setState({\n          datosNuevoContacto\n        });\n      },\n      required: \"true\",\n      maxlength: \"100\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"Celular\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }, \"Celular\"), React.createElement(Input, {\n      id: \"Celular\",\n      value: this.state.datosNuevoContacto.Celular,\n      onChange: e => {\n        let datosNuevoContacto = this.state.datosNuevoContacto;\n        datosNuevoContacto.Celular = e.target.value;\n        this.setState({\n          datosNuevoContacto\n        });\n      },\n      required: \"true\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"Sexo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }, \"Sexo\"), React.createElement(Input, {\n      id: \"Sexo\",\n      value: this.state.datosNuevoContacto.Sexo,\n      onChange: e => {\n        let datosNuevoContacto = this.state.datosNuevoContacto;\n        datosNuevoContacto.Sexo = e.target.value;\n        this.setState({\n          datosNuevoContacto\n        });\n      },\n      required: \"true\",\n      maxlength: \"3\",\n      minlength: \"3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    }))), React.createElement(ModalFooter, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: \"primary\",\n      onClick: this.agregarContacto.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297\n      },\n      __self: this\n    }, \"Guardar\"), ' ', React.createElement(Button, {\n      color: \"secondary\",\n      onClick: this.toggleNuevoContactoModal.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    }, \"Cancelar\"))), React.createElement(Modal, {\n      isOpen: this.state.editarContactoModal,\n      toggle: this.toggleEditarContactoModal.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }, React.createElement(ModalHeader, {\n      toggle: this.toggleEditarContactoModal.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    }, \"Editar un Contacto\"), React.createElement(ModalBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    }, this.state.alert_message != \"\" ? React.createElement(AlertaError, {\n      mensaje: this.state.alert_message,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    }) : null, React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"Nombre\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }, \"Nombre\"), React.createElement(Input, {\n      id: \"Nombre\",\n      value: this.state.datosEditarContacto.Nombre,\n      onChange: e => {\n        let datosEditarContacto = this.state.datosEditarContacto;\n        datosEditarContacto.Nombre = e.target.value;\n        this.setState({\n          datosEditarContacto\n        });\n      },\n      required: \"true\",\n      maxlength: \"100\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"Celular\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }, \"Celular\"), React.createElement(Input, {\n      id: \"Celular\",\n      value: this.state.datosEditarContacto.Celular,\n      onChange: e => {\n        let datosEditarContacto = this.state.datosEditarContacto;\n        datosEditarContacto.Celular = e.target.value;\n        this.setState({\n          datosEditarContacto\n        });\n      },\n      required: \"true\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"Sexo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323\n      },\n      __self: this\n    }, \"Sexo\"), React.createElement(Input, {\n      id: \"Sexo\",\n      value: this.state.datosEditarContacto.Sexo,\n      onChange: e => {\n        let datosEditarContacto = this.state.datosEditarContacto;\n        datosEditarContacto.Sexo = e.target.value;\n        this.setState({\n          datosEditarContacto\n        });\n      },\n      required: \"true\",\n      maxlength: \"3\",\n      minlength: \"3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    }))), React.createElement(ModalFooter, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: \"primary\",\n      onClick: this.actualizarContacto.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332\n      },\n      __self: this\n    }, \"Guardar\"), ' ', React.createElement(Button, {\n      color: \"secondary\",\n      onClick: this.toggleEditarContactoModal.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    }, \"Cancelar\"))), React.createElement(Table, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339\n      },\n      __self: this\n    }, \"#\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340\n      },\n      __self: this\n    }, \"Nombre\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341\n      },\n      __self: this\n    }, \"Celular\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    }, \"Sexo\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }, \"Acciones\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346\n      },\n      __self: this\n    }, contactosReg))));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    contactos: state.contactos\n  };\n}\n\nexport default connect(mapStateToProps, {\n  fetchContactos,\n  saveContactos,\n  updateContactos,\n  deleteContactos\n})(Contactos);","map":{"version":3,"sources":["C:\\PROYECTOS\\VisualStudioNET\\WEBREACTREDUXCONTACTOS\\webreactreduxcontactos\\src\\componentes\\Contactos.js"],"names":["React","Component","Label","FormGroup","Input","Modal","ModalHeader","ModalBody","ModalFooter","Table","Button","Redirect","confirmAlert","FontAwesomeIcon","connect","ContactosList","fetchContactos","saveContactos","updateContactos","deleteContactos","AlertaError","Contactos","componentDidMount","refrescarContactos","constructor","props","token","localStorage","getItem","loggedIn","state","alert_message","contactos","datosNuevoContacto","Nombre","Celular","Sexo","datosEditarContacto","Id","nuevoContactoModal","editarContactoModal","componentWillReceiveProps","nextProps","toggleNuevoContactoModal","setState","toggleEditarContactoModal","agregarContacto","errors","title","isValid","Object","keys","length","then","response","push","data","err","json","catch","error","actualizarContacto","eliminarContacto","id","customUI","onClose","editarContacto","render","contactosReg","map","contacto","bind","e","target","value","mapStateToProps"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport {Label, FormGroup, Input, Modal, ModalHeader, ModalBody, ModalFooter, Table, Button} from 'reactstrap';\r\nimport { Redirect} from 'react-router-dom';\r\nimport { confirmAlert } from 'react-confirm-alert';\r\nimport 'react-confirm-alert/src/react-confirm-alert.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {connect} from 'react-redux';\r\nimport ContactosList from './ContactosList';\r\nimport {fetchContactos, saveContactos, updateContactos, deleteContactos} from '../actions/actionsContactos';\r\nimport AlertaError from './AlertaError';\r\n/*import Navegacion from './Navegacion';*/\r\n//Una Clase que extiende del component de React se comvierte en una etiqueta html\r\nclass Contactos extends Component  {\r\n  componentDidMount()\r\n  {\r\n    this.refrescarContactos();\r\n  }\r\n  constructor(props){\r\n    super(props);\r\n    const token = localStorage.getItem(\"token\");\r\n    let loggedIn = true;\r\n    if (token==null){\r\n      loggedIn = false;\r\n    }\r\n    this.state = {\r\n      alert_message:'',\r\n      contactos: [],\r\n      datosNuevoContacto: {\r\n        Nombre: '',\r\n        Celular: '',\r\n        Sexo: ''\r\n      },\r\n      datosEditarContacto: {\r\n        Id: '',\r\n        Nombre: '',\r\n        Celular: '',\r\n        Sexo: ''\r\n      },\r\n      nuevoContactoModal: false,\r\n      editarContactoModal: false,\r\n      loggedIn\r\n    }\r\n  }\r\n  //Se declara en el objeto state las variables que mantendran el valor\r\n  //Contactos - Los datos que llenaran el Table\r\n  //datosNuevoContacto - Los datos para la Alta\r\n  //datosEditarContacto - Los datos para la modificación\r\n  //nuevoContactoModal - Para la visualización y cierre de la ventana modal de Alta\r\n //editarContactoModal - Para la visualización  y cierre de la ventana modal de modificación\r\n\r\n //Método que refrescara el Table\r\n\r\n  refrescarContactos(){\r\n    this.props.fetchContactos();\r\n    \r\n  }\r\n  componentWillReceiveProps(nextProps){\r\n     //entra cada vez que se ejecuta un evento transaccional\r\n  }\r\n//Método que niega el valor de la variable nuevoContactoModal inicializada en false, esto\r\n//permite mostrar el Modal para la Alta y inicializa los datos del objeto datosNuevoContacto, y\r\n//Se regresa el valor de la variable nuevoContactoModal a false cuando se pulsa el botón de cerrar y\r\n//cuando se pulsa el botón de cancelar\r\n  toggleNuevoContactoModal() {\r\n    this.setState({\r\n      nuevoContactoModal: !this.state.nuevoContactoModal,\r\n      datosNuevoContacto: {\r\n        Nombre: '',\r\n        Celular: '',\r\n        Sexo: ''\r\n      }\r\n    });\r\n  }\r\n  //Método que niega el valor de la variable editarContactoModal inicializada en false, esto\r\n  //permite mostrar el Modal para la Modificación y\r\n  //se regresa el valor de la variable editarContactoModal a false cuando se pulsa el botón de cerrar y\r\n  //cuando se pulsa el botón de cancelar\r\n  toggleEditarContactoModal() {\r\n    //Este metodo se dispara cuando se cierra la ventana modal de editar, y cuando se pulsa el botón de Cancelar\r\n    // convierte el valor de la variable editarContactoModal a false\r\n  this.setState({\r\n    editarContactoModal: !this.state.editarContactoModal\r\n  });\r\n}\r\n//Método que permite guardar los datos capturados en el modal de Alta\r\n  agregarContacto (){\r\n\r\n    let {Nombre, Celular, Sexo} = this.state.datosNuevoContacto;\r\n    let errors = {};\r\n    errors.title = \"hubo error\";\r\n    this.setState({errors});\r\n    const isValid = Object.keys(errors).length === 0;\r\n  \r\n    \r\n      this.props.saveContactos({Nombre, Celular, Sexo}).then(\r\n        (response)=>{\r\n          //Se setea la variable de state contactos, los simbolo {} permiten usarla para setearla por medio de let\r\n          //this.state contiene los contactos que se renderizaron en el Table\r\n            let {contactos} = this.state;\r\n            //Se agrega al final el contacto que devolvio el metodo post de la api contactos\r\n            contactos.push(response.data);\r\n            //Inicializa el estado de las variables nuevoContactoModal y el objeto datosNuevoContacto\r\n            this.setState({contactos, nuevoContactoModal:false, datosNuevoContacto: {\r\n              Nombre: '',\r\n              Celular: '',\r\n              Sexo: ''\r\n            }, alert_message: ''});\r\n        }, \r\n        (err) => err.response.json().then(()=>{\r\n          //Entra cuando los errores son superficiales, por ejemplo cuando los datos que se capturan no \r\n          //coinciden con el tipo de dato \r\n          this.setState({\r\n            alert_message: 'No se pudo agregar el contacto'\r\n          })\r\n        }\r\n        )\r\n      ).catch(error=>{\r\n        //entra cuando los errores se propagan desde la base de datos, por ejemplo cuando la logitud de un \r\n        //  es superior al campo de la base de datos\r\n        this.setState({\r\n          alert_message: 'No se pudo agregar el contacto'\r\n        });\r\n      });\r\n  \r\n  \r\n  }\r\n\r\n//Método que permite guardar los datos capturados en el modal de Modificación\r\n  actualizarContacto()\r\n  {\r\n    let {Id, Nombre, Celular, Sexo} = this.state.datosEditarContacto;\r\n  \r\n    this.props.updateContactos({Id, Nombre, Celular, Sexo}).then(\r\n      ()=>{\r\n          //Se refresca el Table\r\n          this.refrescarContactos();\r\n          //Inicializa el estado de las variables nuevoContactoModal y el objeto datosNuevoContacto\r\n          this.setState({editarContactoModal: false, datosEditarContacto: {\r\n            Id: '',\r\n            Nombre: '',\r\n            Celular: '',\r\n            Sexo: ''\r\n          }, alert_message: ''});\r\n      },\r\n      (err) => err.response.json().then(()=>{\r\n        this.setState({\r\n          alert_message: 'No se pudo actualizar el contacto'\r\n        })\r\n        }\r\n      )\r\n    ).catch(error=>{\r\n      //entra cuando los errores se propagan desde la base de datos, por ejemplo cuando la logitud de un \r\n      //  es superior al campo de la base de datos\r\n      this.setState({\r\n        alert_message: 'No se pudo actualizar el contacto'\r\n      });\r\n    });\r\n  }\r\n//Método para eliminar un Contacto\r\n eliminarContacto(id){\r\n\r\n   confirmAlert({\r\n    customUI: ({ onClose }) => {\r\n      return (\r\n        <div className='custom-ui'>\r\n\r\n          <h1 className=\"glyphicon glyphicon-warning-sign\">\r\n            <FontAwesomeIcon className=\"mr-3\" icon=\"exclamation-triangle\" />\r\n            Esta seguro de eliminar el registro?</h1>\r\n          <div className=\"btn-toolbar row\" role=\"toolbar\">\r\n            <div className=\"col-sm-4\"></div>\r\n          <div className=\"btn-group col-sm-4\">\r\n              <Button color=\"secondary\" size=\"sm\" className=\"mr-3\" onClick={onClose}>\r\n                  <FontAwesomeIcon className=\"mr-1\" icon=\"times\" />\r\n                  No\r\n               </Button>\r\n              <Button color=\"primary\" size=\"sm\" className=\"btn btn-default \"\r\n                    onClick={() => {\r\n                      this.props.deleteContactos({id}).then(\r\n                        ()=>{\r\n                            //Se refresca el Table\r\n                            this.refrescarContactos();\r\n                            onClose();\r\n                        }, \r\n                        (error) => error.response.json().then(({error})=>\r\n                          this.setState({\r\n                            alert_message: 'No se pudo eliminar el contacto'\r\n                          })\r\n                        )\r\n                      );\r\n                    }}\r\n                >\r\n                  <FontAwesomeIcon className=\"mr-1\" icon=\"check\" />\r\n                   Si\r\n              </Button>\r\n              </div>\r\n                <div className=\"col-sm-4\"></div>\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n    });\r\n }\r\n\r\n  //Nota: this.state mantiene el estado de las variables, es como un get pero para setear una  variables\r\n  // se debe ocupar\r\n  //Método para actualizar los datos\r\n  editarContacto (Id, Nombre, Celular, Sexo)\r\n  {\r\n    //Por default la variable editarContactoModal es false pero se niega este valor seteando a verdadero,\r\n    // y de esta manera se consigue visualizar el modal de mdificación y setearle los datos a los controles\r\n    this.setState({\r\n     datosEditarContacto: {Id, Nombre, Celular, Sexo}, editarContactoModal:! this.state.editarContactoModal\r\n   });\r\n  }\r\n\r\n  render(){\r\n    if(this.state.loggedIn==false)\r\n    {\r\n      return <Redirect  to=\"/\" />\r\n    }\r\n    //Se setea a la variable local contactosReg el objeto contactos que se lleno al ejecutarse el método\r\n    //componentWillMount en automatico y se retorna las filas del Table más una columna con los botones de\r\n    //Editar y eliminar\r\n    let contactosReg = this.props.contactos.map((contacto)=>{\r\n      return(\r\n        <tr key={contacto.Id}>\r\n          <td>{contacto.Id}</td>\r\n          <td>{contacto.Nombre}</td>\r\n          <td> {contacto.Celular}</td>\r\n          <td> {contacto.Sexo}</td>\r\n          <td>\r\n            <Button color=\"success\" size=\"sm\" className=\"mr-2\" onClick={this.editarContacto.bind(this, contacto.Id, contacto.Nombre, contacto.Celular, contacto.Sexo)}>Editar</Button>\r\n            <Button color=\"danger\" size=\"sm\" onClick={this.eliminarContacto.bind(this,contacto.Id)}>Eliminar</Button>\r\n          </td>\r\n        </tr>\r\n      )\r\n    });\r\n\r\n    // El botón Agregar cambia a true la variable nuevoContactoModal por medio del metodo toggleNuevoContactoModal\r\n\r\n    //Modal para modificar datos se abre en automatico cuando su atributo isOpen cambia a verdadero por medio de la variable nuevoContactoModal\r\n    //y se cierra cuando la misma variable cambia a false al presionarse los botones cerrar (x) y cancelar\r\n\r\n    //Modal para modificar datos  se abre en automatico cuando su atributo isOpen cambia a verdadero por medio de la variable editarContactoModal\r\n    //y se cierra cuando la misma variable cambia a false al presionarse los botones de cerrar (x) y cancelar\r\n\r\n    //ModalHeader: Encabezado del Modal\r\n    //ModalBody: Contenedor de controles\r\n    //ModalFooter:  Pie del Modal, se utiliza comunmente para añadir botones\r\n\r\n    //FormGroup: Agrupador de Controles\r\n    //Input propiedad value : se le puede ligar una propiedad de un objeto state, y con el método onChange asignarle\r\n    //al value lo que se captura.\r\n    // let {datosNuevoContacto} = this.state;,  se setea el estado y se almacena lo que se captura\r\n    // datosNuevoContacto.Nombre = e.target.value;, se setea lo que se captura en el input en la propiedad que se indica\r\n    // this.setState({datosNuevoContacto});, se confirma el seteo de la propiedad del objeto\r\n\r\n    //<tbody>{contactosReg}</tbody>, la variable local contactosReg proporciona los filas del Table\r\n    return (\r\n      <div id=\"divContactos\">\r\n\r\n      <div className=\"App container\">\r\n        <h2>Aplicación de Contactos</h2>\r\n\r\n        <Button  className=\"my-3\" color=\"primary\" onClick={this.toggleNuevoContactoModal.bind(this)}>Agregar</Button>\r\n        <Modal isOpen={this.state.nuevoContactoModal}  toggle={this.toggleNuevoContactoModal.bind(this)}>\r\n          <ModalHeader toggle={this.toggleNuevoContactoModal.bind(this)}>Agregar un Contacto</ModalHeader>\r\n          <ModalBody>\r\n          {this.state.alert_message!=\"\"?<AlertaError mensaje={this.state.alert_message} />:null}\r\n            <FormGroup>\r\n              <Label for=\"Nombre\">Nombre</Label>\r\n              <Input  id=\"Nombre\" value={this.state.datosNuevoContacto.Nombre} onChange={(e)=>{\r\n                let {datosNuevoContacto} = this.state;\r\n                datosNuevoContacto.Nombre = e.target.value;\r\n                this.setState({datosNuevoContacto});\r\n              }} required=\"true\" maxlength=\"100\"/>\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for=\"Celular\">Celular</Label>\r\n              <Input  id=\"Celular\" value={this.state.datosNuevoContacto.Celular} onChange={(e)=>{\r\n                let {datosNuevoContacto} = this.state;\r\n                datosNuevoContacto.Celular = e.target.value;\r\n                this.setState({datosNuevoContacto});\r\n              }} required = \"true\"/>\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for=\"Sexo\">Sexo</Label>\r\n              <Input  id=\"Sexo\" value={this.state.datosNuevoContacto.Sexo} onChange={(e)=>{\r\n                let {datosNuevoContacto} = this.state;\r\n                datosNuevoContacto.Sexo = e.target.value;\r\n                this.setState({datosNuevoContacto});\r\n              }} required=\"true\" maxlength=\"3\" minlength=\"3\"/>\r\n            </FormGroup>\r\n          </ModalBody>\r\n         <ModalFooter>\r\n           <Button color=\"primary\" onClick={this.agregarContacto.bind(this)}>Guardar</Button>{' '}\r\n           <Button color=\"secondary\" onClick={this.toggleNuevoContactoModal.bind(this)}>Cancelar</Button>\r\n         </ModalFooter>\r\n        </Modal>\r\n\r\n        <Modal isOpen={this.state.editarContactoModal}  toggle={this.toggleEditarContactoModal.bind(this)}>\r\n         <ModalHeader toggle={this.toggleEditarContactoModal.bind(this)}>Editar un Contacto</ModalHeader>\r\n         <ModalBody>\r\n         {this.state.alert_message!=\"\"?<AlertaError mensaje={this.state.alert_message} />:null}\r\n          <FormGroup>\r\n            <Label for=\"Nombre\">Nombre</Label>\r\n            <Input  id=\"Nombre\" value={this.state.datosEditarContacto.Nombre} onChange={(e)=>{\r\n              let {datosEditarContacto} = this.state;\r\n              datosEditarContacto.Nombre = e.target.value;\r\n              this.setState({datosEditarContacto});\r\n            }} required=\"true\" maxlength=\"100\"/>\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <Label for=\"Celular\">Celular</Label>\r\n            <Input  id=\"Celular\" value={this.state.datosEditarContacto.Celular} onChange={(e)=>{\r\n              let {datosEditarContacto} = this.state;\r\n              datosEditarContacto.Celular = e.target.value;\r\n              this.setState({datosEditarContacto});\r\n            }} required=\"true\"/>\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <Label for=\"Sexo\">Sexo</Label>\r\n            <Input  id=\"Sexo\" value={this.state.datosEditarContacto.Sexo} onChange={(e)=>{\r\n              let {datosEditarContacto} = this.state;\r\n              datosEditarContacto.Sexo = e.target.value;\r\n              this.setState({datosEditarContacto});\r\n            }} required=\"true\" maxlength=\"3\" minlength=\"3\"/>\r\n          </FormGroup>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"primary\" onClick={this.actualizarContacto.bind(this)}>Guardar</Button>{' '}\r\n          <Button color=\"secondary\" onClick={this.toggleEditarContactoModal.bind(this)}>Cancelar</Button>\r\n        </ModalFooter>\r\n       </Modal>\r\n        <Table>\r\n          <thead>\r\n            <tr>\r\n              <th>#</th>\r\n              <th>Nombre</th>\r\n              <th>Celular</th>\r\n              <th>Sexo</th>\r\n              <th>Acciones</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {contactosReg}\r\n            \r\n          </tbody>\r\n        </Table>\r\n        \r\n      </div>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps (state)\r\n{\r\n\r\n  return {\r\n    contactos: state.contactos\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, {fetchContactos, saveContactos, updateContactos, deleteContactos})(Contactos);\r\n"]},"metadata":{},"sourceType":"module"}